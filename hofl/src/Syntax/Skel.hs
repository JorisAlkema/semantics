module Syntax.Skel where

-- Haskell module generated by the BNF converter

import Syntax.Abs
import ErrM
type Result = Err String

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transNeg :: Neg -> Result
transNeg x = case x of
  Neg string -> failure x
transAnd :: And -> Result
transAnd x = case x of
  And string -> failure x
transOr :: Or -> Result
transOr x = case x of
  Or string -> failure x
transLam :: Lam -> Result
transLam x = case x of
  Lam string -> failure x
transTimes :: Times -> Result
transTimes x = case x of
  Times string -> failure x
transTo :: To -> Result
transTo x = case x of
  To string -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TBool -> failure x
  TPRod type_1 times type_2 -> failure x
  TFun type_1 to type_2 -> failure x
transBConst :: BConst -> Result
transBConst x = case x of
  BTrue -> failure x
  BFalse -> failure x
transExp :: Exp -> Result
transExp x = case x of
  Var ident -> failure x
  Val integer -> failure x
  BVal bconst -> failure x
  App exp1 exp2 -> failure x
  Fst exp -> failure x
  Snd exp -> failure x
  Mul exp1 exp2 -> failure x
  Add exp1 exp2 -> failure x
  Sub exp1 exp2 -> failure x
  Pair exp1 exp2 -> failure x
  BEq exp1 exp2 -> failure x
  BLeq exp1 exp2 -> failure x
  BNeg neg exp -> failure x
  BAnd exp1 and exp2 -> failure x
  BOr exp1 or exp2 -> failure x
  Ite exp1 exp2 exp3 -> failure x
  Abstr lam ident exp -> failure x
  Rec ident exp -> failure x
  Typed exp type_ -> failure x
transAssignment :: Assignment -> Result
transAssignment x = case x of
  Assign ident exp -> failure x
transEnvironment :: Environment -> Result
transEnvironment x = case x of
  Env assignments -> failure x

