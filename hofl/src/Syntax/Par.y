-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Syntax.Par where
import Syntax.Abs
import Syntax.Lex
import ErrM

}

%name pType Type
%name pExp Exp
%name pEnvironment Environment
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '.' { PT _ (TS _ 7) }
  '::' { PT _ (TS _ 8) }
  ';' { PT _ (TS _ 9) }
  '<=' { PT _ (TS _ 10) }
  '=' { PT _ (TS _ 11) }
  '==' { PT _ (TS _ 12) }
  'bool' { PT _ (TS _ 13) }
  'else' { PT _ (TS _ 14) }
  'false' { PT _ (TS _ 15) }
  'fst' { PT _ (TS _ 16) }
  'if' { PT _ (TS _ 17) }
  'int' { PT _ (TS _ 18) }
  'rec' { PT _ (TS _ 19) }
  'snd' { PT _ (TS _ 20) }
  'then' { PT _ (TS _ 21) }
  'true' { PT _ (TS _ 22) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_Neg { PT _ (T_Neg $$) }
  L_And { PT _ (T_And $$) }
  L_Or { PT _ (T_Or $$) }
  L_Lam { PT _ (T_Lam $$) }
  L_Times { PT _ (T_Times $$) }
  L_To { PT _ (T_To $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Neg :: { Neg}
Neg  : L_Neg { Neg ($1)}

And :: { And}
And  : L_And { And ($1)}

Or :: { Or}
Or  : L_Or { Or ($1)}

Lam :: { Lam}
Lam  : L_Lam { Lam ($1)}

Times :: { Times}
Times  : L_Times { Times ($1)}

To :: { To}
To  : L_To { To ($1)}

Type2 :: { Type }
Type2 : 'int' { Syntax.Abs.TInt }
      | 'bool' { Syntax.Abs.TBool }
      | '(' Type ')' { $2 }
Type1 :: { Type }
Type1 : Type1 Times Type2 { Syntax.Abs.TPRod $1 $2 $3 }
      | Type2 { $1 }
Type :: { Type }
Type : Type1 To Type { Syntax.Abs.TFun $1 $2 $3 } | Type1 { $1 }
BConst :: { BConst }
BConst : 'true' { Syntax.Abs.BTrue }
       | 'false' { Syntax.Abs.BFalse }
Exp10 :: { Exp }
Exp10 : Ident { Syntax.Abs.Var $1 }
      | Integer { Syntax.Abs.Val $1 }
      | BConst { Syntax.Abs.BVal $1 }
      | '(' Exp ')' { $2 }
Exp9 :: { Exp }
Exp9 : Exp9 Exp10 { Syntax.Abs.App $1 $2 }
     | 'fst' Exp10 { Syntax.Abs.Fst $2 }
     | 'snd' Exp10 { Syntax.Abs.Snd $2 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '*' Exp9 { Syntax.Abs.Mul $1 $3 } | Exp9 { $1 }
Exp7 :: { Exp }
Exp7 : Exp7 '+' Exp8 { Syntax.Abs.Add $1 $3 }
     | Exp7 '-' Exp8 { Syntax.Abs.Sub $1 $3 }
     | Exp8 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 ',' Exp6 { Syntax.Abs.Pair $1 $3 } | Exp7 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 '==' Exp6 { Syntax.Abs.BEq $1 $3 }
     | Exp6 '<=' Exp6 { Syntax.Abs.BLeq $1 $3 }
     | Exp6 { $1 }
Exp4 :: { Exp }
Exp4 : Neg Exp5 { Syntax.Abs.BNeg $1 $2 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 And Exp4 { Syntax.Abs.BAnd $1 $2 $3 }
     | Exp3 Or Exp4 { Syntax.Abs.BOr $1 $2 $3 }
     | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : 'if' Exp3 'then' Exp6 'else' Exp2 { Syntax.Abs.Ite $2 $4 $6 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : Lam Ident '.' Exp1 { Syntax.Abs.Abstr $1 $2 $4 }
     | 'rec' Ident '.' Exp1 { Syntax.Abs.Rec $2 $4 }
     | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp '::' Type { Syntax.Abs.Typed $1 $3 } | Exp1 { $1 }
Assignment :: { Assignment }
Assignment : Ident '=' Exp { Syntax.Abs.Assign $1 $3 }
ListAssignment :: { [Assignment] }
ListAssignment : {- empty -} { [] }
               | Assignment { (:[]) $1 }
               | Assignment ';' ListAssignment { (:) $1 $3 }
Environment :: { Environment }
Environment : ListAssignment { Syntax.Abs.Env $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

