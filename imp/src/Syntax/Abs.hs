-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}

module Syntax.Abs where

import Data.Data    (Data, Typeable)
import GHC.Generics (Generic)
import Data.Hashable

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

instance Hashable Ident

newtype Neg = Neg String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

newtype And = And String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

newtype Or = Or String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data AExp
    = EInt Integer
    | EVar Ident
    | ETimes AExp AExp
    | EPlus AExp AExp
    | ESub AExp AExp
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data BVal = BTrue | BFalse
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data BExp
    = EVal BVal
    | EEq AExp AExp
    | ELeq AExp AExp
    | ENeg Neg BExp
    | EAnd BExp And BExp
    | AOr BExp Or BExp
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Com
    = CSkip
    | CAssign Ident AExp
    | CSeq Com Com
    | CIte BExp Com Com
    | CWhile BExp Com
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Assign = Assign Ident Integer
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Env = Env [Assign]
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)
