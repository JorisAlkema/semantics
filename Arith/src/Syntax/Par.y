-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Syntax.Par
  ( happyError
  , myLexer
  , pExp
  , pEnv
  ) where
import qualified Syntax.Abs
import Syntax.Lex
}

%name pExp Exp
%name pEnv Env
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '/' { PT _ (TS _ 6) }
  '=' { PT _ (TS _ 7) }
  L_Ident  { PT _ (TV $$) }
  L_doubl  { PT _ (TD $$) }

%%

Ident :: { Syntax.Abs.Ident}
Ident  : L_Ident { Syntax.Abs.Ident $1 }

Double  :: { Double }
Double   : L_doubl  { (read ($1)) :: Double }

Exp2 :: { Syntax.Abs.Exp }
Exp2 : Double { Syntax.Abs.ENum $1 }
     | Ident { Syntax.Abs.EVar $1 }
     | '(' Exp ')' { $2 }

Exp1 :: { Syntax.Abs.Exp }
Exp1 : Exp1 '*' Exp2 { Syntax.Abs.ETimes $1 $3 }
     | Exp1 '/' Exp2 { Syntax.Abs.EDiv $1 $3 }
     | Exp2 { $1 }

Exp :: { Syntax.Abs.Exp }
Exp : Exp '+' Exp1 { Syntax.Abs.EPlus $1 $3 } | Exp1 { $1 }

Assign :: { Syntax.Abs.Assign }
Assign : Ident '=' Double { Syntax.Abs.Assign $1 $3 }

ListAssign :: { [Syntax.Abs.Assign] }
ListAssign : {- empty -} { [] }
           | Assign { (:[]) $1 }
           | Assign ',' ListAssign { (:) $1 $3 }

Env :: { Syntax.Abs.Env }
Env : ListAssign { Syntax.Abs.Env $1 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

